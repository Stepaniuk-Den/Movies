{"version":3,"file":"static/js/33.d17bc2ac.chunk.js","mappings":"8SAEMA,EAAM,mCAGNC,EAAYC,EAAAA,EAAAA,OAAa,CAC7BC,QAAS,kCAGEC,EAAwB,mCAAG,sGACfH,EAAUI,IAAV,uBAPL,MAOK,oBACkBL,IAFH,uBAC9BM,EAD8B,EAC9BA,KAD8B,kBAI/BA,GAJ+B,2CAAH,qDAOxBC,EAAsB,mCAAG,WAAMC,GAAN,yFACbP,EAAUI,IAAV,gBAAuBG,EAAvB,oBAA0CR,IAD7B,uBAC5BM,EAD4B,EAC5BA,KAD4B,kBAE7BA,GAF6B,2CAAH,sDAKtBG,EAAmB,mCAAG,WAAMD,GAAN,yFACVP,EAAUI,IAAV,gBACZG,EADY,4BACeR,IAFL,uBACzBM,EADyB,EACzBA,KADyB,kBAI1BA,GAJ0B,2CAAH,sDAOnBI,EAAgB,mCAAG,WAAMF,GAAN,yFACPP,EAAUI,IAAV,gBACZG,EADY,4BACeR,IAFR,uBACtBM,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,sDAYhBK,EAAmB,mCAAG,WAAMC,GAAN,yFACVX,EAAUI,IAAV,+BACGL,EADH,kBACgBY,IAFN,uBACzBN,EADyB,EACzBA,KADyB,kBAI1BA,GAJ0B,2CAAH,qD,4KCrCnBO,EAAqBC,EAAAA,GAAAA,IAAH,+jCA2DlBC,GAAuBD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,wiB,SCiBjC,EAtEqB,WAAO,IAAD,IACzB,GAAwCG,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQf,GAAYgB,EAAAA,EAAAA,MAAZhB,QACFiB,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,MAEnDC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,oGAEnBX,GAAa,GAFM,UAGYd,EAAAA,EAAAA,IAAuBC,GAHnC,OAGbyB,EAHa,OAInBd,EAAgBc,GAJG,gDAMnBV,EAAS,KAAMW,SANI,yBAQnBb,GAAa,GARM,4EAAH,qDAWpBW,GACD,GAAE,CAACxB,IAEJ,IAAQ2B,EAAuCjB,EAAvCiB,SAAUC,EAA6BlB,EAA7BkB,YAAaC,EAAgBnB,EAAhBmB,MAAOC,EAASpB,EAAToB,KAChCC,EAAU,yCAAqCH,GAErD,OACE,UAACvB,EAAD,YACE,wBAAI,mBACJ,SAAC,KAAD,CAAS2B,UAAU,SAASC,GAAId,EAAYe,QAA5C,SAAqD,YAGpDpB,IACC,0BACE,yBAAG,sCAAoCA,OAG1CF,GACC,0BACE,SAACuB,EAAA,EAAD,OAGF,iCACE,iBAAKH,UAAU,aAAf,WACE,gBAAKA,UAAU,QAAf,UACE,gBAAKI,IAAKL,EAAYM,IAAKR,GAAgBC,OAE7C,iBAAKE,UAAU,qBAAf,WACE,wBAAKH,GAAgBC,KACrB,uBAAIH,WAGR,2BACE,yBACE,SAACpB,EAAD,CAAsB0B,GAAG,UAAzB,SAAmC,eAErC,yBACE,SAAC1B,EAAD,CAAsB0B,GAAG,OAAzB,SAAgC,eAGpC,SAAC,EAAAK,SAAD,CAAUC,UAAU,SAACJ,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,WAMX,C","sources":["Services/ServicesApi.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '149c378c60b6910f81bab715963f1e90';\nconst time_window = 'day';\n\nconst $instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nexport const requestTopRatedMovieList = async () => {\n  const { data } = await $instance.get(\n    `trending/all/${time_window}?api_key=${KEY}`\n  );\n  return data;\n};\n\nexport const requestMovieReviewById = async movieId => {\n  const { data } = await $instance.get(`movie/${movieId}?api_key=${KEY}`);\n  return data;\n};\n\nexport const requestMovieReviews = async movieId => {\n  const { data } = await $instance.get(\n    `movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return data;\n};\n\nexport const requestMovieCast = async movieId => {\n  const { data } = await $instance.get(\n    `movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return data;\n};\n\nexport const requestMoviePoster = async posterPath => {\n  const { data } = await $instance.get(`movie/${posterPath}?api_key=${KEY}`);\n  return data;\n};\n\nexport const requestMoviesSearch = async query => {\n  const { data } = await $instance.get(\n    `search/movie?api_key=${KEY}&query=${query}`\n  );\n  return data;\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledMovieDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 20px auto;\n  padding: 0 20px;\n\n  & .thumb {\n    width: 300px;\n    border-radius: 15px;\n    overflow: hidden;\n  }\n\n  & .movie-card {\n    display: flex;\n    gap: 50px;\n  }\n\n  & .movie-card-details {\n    width: 50%;\n  }\n\n  & .goback {\n    display: flex;\n    justify-content: center;\n    text-decoration: none;\n    width: 100px;\n    margin: 20px 0;\n    padding: 5px 10px;\n    border: 1px solid grey;\n    border-radius: 10px;\n    transition: all 0.3s ease-in-out;\n    scale: 1;\n\n    &:hover {\n      background-color: #afffff;\n      color: #000000;\n      scale: 1.1;\n      translate: 7px;\n      box-shadow: 0px 2px 5px 0px rgba(0, 0, 0, 0.2),\n        0px 1px 5px 0px rgba(0, 0, 0, 0.14),\n        0px 2px 5px -1px rgba(0, 0, 0, 0.12);\n    }\n    &:active {\n      scale: 0.9;\n    }\n  }\n\n  & ul {\n    list-style: none;\n  }\n\n  @media screen and (max-width: 768px) {\n    & .movie-card {\n      display: flex;\n      flex-direction: column;\n      gap: 50px;\n    }\n  }\n`;\nexport const StyledNavLinkDetails = styled(NavLink)`\n  display: flex;\n  justify-content: center;\n  text-decoration: none;\n  width: 100px;\n  margin: 20px 0;\n  padding: 5px 10px;\n  border: 1px solid grey;\n  border-radius: 10px;\n  transition: all 0.3s ease-in-out;\n  scale: 1;\n\n  &.active {\n    background-color: #afffff;\n    color: #000000;\n  }\n  &:hover {\n    scale: 1.1;\n    background-color: #afffff;\n    color: #000000;\n    box-shadow: 0px 2px 5px 0px rgba(0, 0, 0, 0.2),\n      0px 1px 5px 0px rgba(0, 0, 0, 0.14), 0px 2px 5px -1px rgba(0, 0, 0, 0.12);\n  }\n`;\n","import { requestMovieReviewById } from 'Services/ServicesApi';\nimport Loader from 'components/Loader/Loader';\nimport React, { Suspense, useEffect, useRef, useState } from 'react';\nimport { NavLink, Outlet, useLocation, useParams } from 'react-router-dom';\nimport {\n  StyledMovieDetails,\n  StyledNavLinkDetails,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const fetchMovieById = async () => {\n      try {\n        setIsLoading(true);\n        const movieDetailsById = await requestMovieReviewById(movieId);\n        setMovieDetails(movieDetailsById);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieById();\n  }, [movieId]);\n\n  const { overview, poster_path, title, name } = movieDetails;\n  const posterPath = `https://image.tmdb.org/t/p/w300${poster_path}`;\n\n  return (\n    <StyledMovieDetails>\n      <h2>Movie Details</h2>\n      <NavLink className=\"goback\" to={backLinkRef.current}>\n        Go back\n      </NavLink>\n      {error && (\n        <div>\n          <p>Opps, some error occured... Error: {error}</p>\n        </div>\n      )}\n      {isLoading ? (\n        <div>\n          <Loader />\n        </div>\n      ) : (\n        <>\n          <div className=\"movie-card\">\n            <div className=\"thumb\">\n              <img src={posterPath} alt={title ? title : name} />\n            </div>\n            <div className=\"movie-card-details\">\n              <h3>{title ? title : name}</h3>\n              <p>{overview}</p>\n            </div>\n          </div>\n          <ul>\n            <li>\n              <StyledNavLinkDetails to=\"reviews\">Reviews</StyledNavLinkDetails>\n            </li>\n            <li>\n              <StyledNavLinkDetails to=\"cast\">Cast</StyledNavLinkDetails>\n            </li>\n          </ul>\n          <Suspense fallback={<Loader />}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </StyledMovieDetails>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["KEY","$instance","axios","baseURL","requestTopRatedMovieList","get","data","requestMovieReviewById","movieId","requestMovieReviews","requestMovieCast","requestMoviesSearch","query","StyledMovieDetails","styled","StyledNavLinkDetails","NavLink","useState","movieDetails","setMovieDetails","isLoading","setIsLoading","error","setError","useParams","location","useLocation","backLinkRef","useRef","state","from","useEffect","fetchMovieById","movieDetailsById","message","overview","poster_path","title","name","posterPath","className","to","current","Loader","src","alt","Suspense","fallback"],"sourceRoot":""}